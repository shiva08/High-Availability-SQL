{
   "$schema":"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
   "contentVersion":"1.0.0.0",
   "parameters":{
      "virtualNetwork":{
         "type":"string",
         "defaultValue" : "SQLHAVNET1"
      },
      // "createSubnets" : {
      //    "type" : "bool",
      //    "defaultValue" : "[false()]"
      // }, 
      // "IPAddressSpace":{
      //    "type":"string",
      //    "defaultValue":"10.0.0.0"
      // },
      // "subnetClassBits":{
      //    "type":"int",
      //    "defaultValue":24
      // },
      // "subnetPrefix":{
      //    "type":"string",
      //    "defaultValue":"PrefixSubnetsss"
      // },
      // "networkSecurityGroupName":{
      //    "type":"string",
      //    "defaultValue":"NRMS-z6zkw5h6ct7geSQLHAVNET1"
      // },
      "subnetNamesArray": {
         "type" : "Array",
         "defaultValue" : [],
         "metadata": {
           "description": "Make sure the array size is equal to VM count, Example: ['Subnet-1','Subnet-2'] "
         }
      },
      "subnetNameForAG":{
         "type":"string",
         "defaultValue":"DC-subnet"
         //Is it needed for multisubnet
      },
      "vmCount":{
         "type":"int",
         "defaultValue":3,
         "minValue" : 2,
         "maxValue" : 9,
         "metadata": {
           "description": "Maximum number of VMs currently supported for AG is 9"
         }
      },
      // "createVM":{
      //    "type" : "bool",
      //    "defaultValue" : "[false()]"
      // },
      // If createVM is true (checked on UI), generateVMNames can be true or false
      // If createVM is false, generateVMNames should be false (to avoid spelling errors of vmPrefix-0,vmPrefix-1)
      // "generateVMNames":{
      //    "type" : "bool",
      //    "defaultValue" : "[false()]"
      // },
      "vmPrefix":{
         "type":"string",
         "defaultValue":"autodel",
         "metadata": {
           "description": "VMs created : vmPrefix-1, vmPrefix-2"
         }
      },
      // "vmNamesArray":{
      //    "type" : "Array",
      //    "defaultValue" : []
      // },
      "sqlServerImagePublisher":{
         "type":"string",
         "defaultValue":"MicrosoftSQLServer"
         //make it Non - editable?  
         //non -editable is n't possible
         // custom images aren't working
      },
      "sqlServerImageType":{
         "type":"string",
         "defaultValue":"SQL2016SP2-WS2016",
         "allowedValues" : ["SQL2012SP4-WS2012R2", "SQL2012SP4-WS2012R2-BYOL", "SQL2014SP2-WS2012R2", "SQL2014SP2-WS2012R2-BYOL", "SQL2014SP3-WS2012R2", "SQL2014SP3-WS2012R2-BYOL", "SQL2016SP1-WS2016", "SQL2016SP1-WS2016-BYOL", "SQL2016SP2-WS2012R2", "SQL2016SP2-WS2016", "SQL2016SP2-WS2016-BYOL", "SQL2016SP2-WS2019", "SQL2016SP2-WS2019-BYOL", "SQL2016SP3-WS2019", "SQL2017-WS2016", "SQL2017-WS2016-BYOL", "SQL2017-WS2019", "SQL2017-WS2019-BYOL", "SQL2019-WS2019", "SQL2019-WS2019-BYOL", "SQL2019-WS2022"]
      },
      "sqlServerSku":{
         "type":"string",
         "defaultValue":"Enterprise",
         "allowedValues": [
           "Enterprise",
           "Standard",
           "Developer"
         ],
         "metadata": {
           "description": "SQL Server Gallery Image SKU. For Standard edition, vmCount<=2"
         }
         //Add docs
      },
      "sqlServerLicenseType":{
         "type":"string",
         "defaultValue":"PAYG",
         "allowedValues": [ "PAYG", "AHUB" ],
         "metadata": {
             "description": "PAYG : Pay As You Go, AHUB : Azure Hybrid Use Benefits."
         }
      },
      // "existingSqlServiceAccount":{
      //    "type":"string",
      //    "defaultValue":"DomainAdmin@corp.contoso.com"
      // },
      // "sqlServicePassword":{
      //    "type":"securestring",
      //    "defaultValue":"Contoso!0000"
      // },
      "sqlConnectivityType":{
         "type" : "string",
         "defaultValue" : "Private",
         "allowedValues" : ["Private", "Public"]
      },
      "sqlPortNumber":{
         "type" : "int",
         "defaultValue":1433,
         "minValue" : 1,
         "maxValue" : 65536
      },
      "SQLAuthUpdateUserName": {
         "type" : "string",
         "defaultValue" : ""
      },
      "SQLAuthUpdatePassword": {
         "type" : "secureString",
         "defaultValue" : ""
      },
      "adminUsername":{
         "type":"string",
         "defaultValue":"DomainAdmin"
      },
      "adminPassword":{
         "type":"secureString",
         "defaultValue":"Contoso!0000"
      },
      "createPublicIpAddress":{
         "type": "bool",
         "defaultValue" : false
      },
      "publicIpAddressType":{
         "type":"string",
         "defaultValue":"Static",
         "allowedValues": [
           "Static", 
           "Dynamic"
         ]
         // give option to no public ip ? - generate vm witgour ip
      },
      "publicIpAddressSku":{
         "type":"string",
         "defaultValue":"Standard",
         "allowedValues": [
           "Basic", 
           "Standard"
         ]
      },
      "virtualMachineSize":{
         "type":"string",
         "defaultValue":"Standard_D2s_v3",
         "metadata": {
           "description": "Size of the virtual machine. Refer https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?tabs=bicep#hardwareprofile"
         }
      },
      "KeyVaultCredentialEnabled": {
         "type" : "bool",
         "defaultValue" : false
      },
      "sqlAkvCredentialName" : { 
         "type" : "string",
         "defaultValue" : ""
      },
      "sqlAkvUrl" : { 
         "type" : "string",
         "defaultValue" : ""
      },
      "sqlAkvPrincipalName" : { 
         "type" : "string",
         "defaultValue" : ""
      },
      "sqlAkvPrincipalSecret": {
         "type" : "string", 
         "defaultValue" : ""
      },
      "dataPath":{
         "type" : "string",
         "defaultValue":"F:\\data"
      },
      "logPath":{
         "type" : "string",
         "defaultValue":"G:\\log"
      },
      "maxdop": {
         "type": "int",
         "defaultValue" : 0
      },
      "isOptimizeForAdHocWorkloadsEnabled": {
         "type": "bool",
         "defaultValue" : false
      },
      "collation": {
         "type": "string",
         "defaultValue" : "SQL_Latin1_General_CP1_CI_AS"
      },
      "minServerMemoryMB": {
         "type": "int",
         "defaultValue" : 0
      },
      "maxServerMemoryMB": {
         "type": "int",
         "defaultValue" : 2147483647
      },
      "enableAcceleratedNetworking":{
         "type" : "bool",
         "defaultValue": true
      },
      "tempDbPath": {
         "type": "string",
         "defaultValue" : "D:\\tempDb"
      },
      "dataFileCount": {
         "type": "int",
         "defaultValue" : 2
      },
      "dataFileSize": {
         "type": "int",
         "defaultValue" : 8
      },
      "dataGrowth": {
         "type": "int",
         "defaultValue" : 64
      },
      "logFileSize": {
         "type": "int",
         "defaultValue" : 8
      },
      "logGrowth": {
         "type": "int",
         "defaultValue" : 64
      },
      "SQLSystemDbOnDataDisk": {
         "type": "bool",
         "defaultValue" : false
      },
      "domainJoinUserName":{
         "type":"string",
         "defaultValue":"CORP"
      },
      "domainFQDN":{
         "type":"string",
         "defaultValue":"corp.contoso.com"
      },
      "failoverClusterName":{
         "type":"string",
         "defaultValue":"autofc",
         "maxLength": 15,
         "metadata": {
            "description": "Specify the Windows Failover Cluster Name. Maximum length is 15"
         }
      },
      "failoverSQLServerImageType":{
         "type":"string",
         "defaultValue":"SQL2016-WS2016",
         "allowedValues": [ "SQL2017-WS2016", "SQL2016-WS2016", "SQL2019-WS2019" ],
         "metadata": {
            "description": "Select the version of SQL Server Image type"
         }
         //deduce from sql image above . remove this field
         // check if it is one to one
         // this is old data
      },
      "loadBalancerName":{
         "type":"string",
         "defaultValue":"autoloadc"
      },
      "loadBalancerSku":{
         "type":"string",
         "defaultValue":"Standard",
         "allowedValues": [
           "Basic", 
           "Standard"
         ]
      },
      "loadBalancerTier":{
         "type":"string",
         "defaultValue":"Regional",
         "allowedValues": [
           "Regional", 
           "Global"
         ]
      },
      "sqlAvailabilityGroup":{
         "type":"string",
         "metadata": {
           "description": "Ensure there is no AG with same name registered with domain controller."
         },
         "defaultValue" : "dels"
      },
      "ListenerName":{
         "type":"string",
         "maxLength" : 15,
         "metadata": {
           "description": "Maximum length of AG Listener is 15. Ensure a listener with same name doesn't exist with domain controller."
         },
         "defaultValue" : "dels1"
      },
      "ListenerIp":{
         "type":"string",
         "defaultValue":"10.0.0.22"
      }
   },
   "variables":{
      // "AddressRangeArray":"[split(parameters('IPAddressSpace'), '.')]",
      "copy":[
         {
            "name":"vmArrayHelper",
            "count":"[parameters('vmCount')]",
            "input":"[concat(parameters('vmPrefix'), '-', copyIndex('vmArrayHelper', 1))]"
         }
         // ,
         // {
         //    "name":"subnetArrayHelper",
         //    "count":"[parameters('vmCount')]",
         //    "input":"[concat(parameters('subnetPrefix'), copyIndex('subnetArrayHelper'))]"
         // },
         // {
         //    "name":"subnetIPAddressArray",
         //    "count":"[parameters('vmCount')]",
         //    "input":"[format('{0}.{1}.{2}.{3}/{4}', variables('AddressRangeArray')[0], variables('AddressRangeArray')[1], copyIndex('subnetIPAddressArray', 5), variables('AddressRangeArray')[3], string(parameters('subnetClassBits')) ) ]"
         // }
      ],

      // "subnetArray" : "[ if(parameters('createSubnets'), variables('subnetArrayHelper'), parameters('subnetNamesArray') ) ]" ,
      // "vmArray" : "[ if(parameters('generateVMNames'), variables('vmArrayHelper'), parameters('vmNamesArray')) ]",

      // "subnetArray" : "[ parameters('subnetNamesArray') ) ]",
      "vmArray" : "[ variables('vmArrayHelper') ]",



      "vmList":"[replace(replace(replace(string(variables('vmArray')),'[',''),']',''),'\"','')]",
      // "AddSubnetToVnetUri":"https://raw.githubusercontent.com/shiva08/ARM/main/add-subnet-to-existing-vnet.json",
      // "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.network/subnet-add-vnet-existing/azuredeploy.json",
      "CreateSQLVMTemplateUri":"https://raw.githubusercontent.com/shiva08/ARM/main/create-sqlvm.json",
      "JoinDomainTemplateUri":"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.compute/vm-domain-join-existing/azuredeploy.json",
      "AGPrerequisitesTemplateUri":"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.sqlvirtualmachine/sql-vm-ag-setup/azuredeploy.json",
      "LoadBalancerTemplateUri":"https://raw.githubusercontent.com/shiva08/ARM/main/load-balancer.json",
      "AGListenerTemplateUri":"https://raw.githubusercontent.com/shiva08/ARM/main/ag-listener.json"
   },
   "resources":[
      // {
      //    "condition": "[parameters('createSubnets')]",
      //    "type":"Microsoft.Resources/deployments",
      //    "apiVersion":"2021-04-01",
      //    "name":"[concat('add-subnet-to-vnet', '-', uniqueString(resourceGroup().id), '-', copyIndex())]",
      //    "copy":{
      //       "name":"Add-Subnet-To-Vnet",
      //       "count":"[parameters('vmCount')]",
      //       "mode":"parallel"
      //    },
      //    "properties":{
      //       "expressionEvaluationOptions": {
      //          "scope": "inner"
      //       },
      //       "mode":"Incremental",
      //       "template":{
      //         "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
      //         "contentVersion": "1.0.0.0",
      //         "metadata": {
      //           "_generator": {
      //             "name": "bicep",
      //             "version": "0.4.1008.15138",
      //             "templateHash": "10509826654560146891"
      //           }
      //         },
      //         "parameters": {
      //           "existingVNETName": {
      //             "type": "string",
      //             "metadata": {
      //               "description": "Name of the VNET to add a subnet to"
      //             }
      //           },
      //           "newSubnetName": {
      //             "type": "string",
      //             "metadata": {
      //               "description": "Name of the subnet to add"
      //             }
      //           },
      //           "newSubnetAddressPrefix": {
      //             "type": "string",
      //             "defaultValue": "10.0.0.0/24",
      //             "metadata": {
      //               "description": "Address space of the subnet to add"
      //             }
      //           },
      //           "networkSecurityGroupName" :{
      //             "type" : "string"
      //           }
      //         },
      //         "functions": [],
      //         "resources": [
      //           {
      //             "type": "Microsoft.Network/virtualNetworks/subnets",
      //             "apiVersion": "2021-03-01",
      //             "name": "[format('{0}/{1}', parameters('existingVNETName'), parameters('newSubnetName'))]",
      //             "properties": {
      //               "addressPrefix": "[parameters('newSubnetAddressPrefix')]",
      //               "networkSecurityGroup" : {
      //                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
      //               }
      //              }
      //           }
      //         ]
            
      //       },
      //       "parameters":{
      //          "existingVNETName":{
      //             "value":"[parameters('virtualNetwork')]"
      //          },
      //          "newSubnetName":{
      //             "value":"[variables('subnetArray')[copyIndex()]]"
      //          },
      //          "newSubnetAddressPrefix":{
      //             "value":"[variables('subnetIPAddressArray')[copyIndex()]]"
      //          },
      //          "networkSecurityGroupName":{
      //             "value":"[parameters('networkSecurityGroupName')]"
      //          }
      //       }
      //    }
      // },
      {
         // "condition": "[parameters('createVM')]",
         "type":"Microsoft.Resources/deployments",
         "apiVersion":"2021-04-01",
         "name":"[concat('create-sqlvm', '-', uniqueString(resourceGroup().id), '-', copyIndex())]",
         // "dependsOn":[
         //    "Add-Subnet-To-Vnet"
         // ],
         "copy":{
            "name":"Create-SQLVM",
            "count":"[parameters('vmCount')]",
            "mode":"parallel"
         },
         "properties":{
            "expressionEvaluationOptions": {
               "scope": "inner"
            },
            "mode":"Incremental",
            "template": {
               "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "parameters": {
                 "location": {
                     "type": "string"
                 },
                 "networkInterfaceName": {
                     "type": "string"
                 },
                 "enableAcceleratedNetworking": {
                     "type": "bool"
                 },
                 "networkSecurityGroupName": {
                     "type": "string"
                 },
                 "networkSecurityGroupRules": {
                     "type": "array"
                 },
                 "subnetName": {
                     "type": "string"
                 },
                 "virtualNetworkId": {
                     "type": "string"
                 },
                 "createPublicIpAddress" : {
                     "type" : "bool"
                 },
                 "publicIpAddressName": {
                     "type": "string"
                 },
                 "publicIpAddressType": {
                     "type": "string"
                 },
                 "publicIpAddressSku": {
                     "type": "string"
                 },
                 "virtualMachineName": {
                     "type": "string"
                 },
                 "virtualMachineComputerName": {
                     "type": "string"
                 },
                 "virtualMachineRG": {
                     "type": "string"
                 },
                 "osDiskType": {
                     "type": "string"
                 },
                 "dataDisks": {
                     "type": "array"
                 },
                 "dataDiskResources": {
                     "type": "array"
                 },
                 "virtualMachineSize": {
                     "type": "string"
                 },
                 "adminUsername": {
                     "type": "string"
                 },
                 "adminPassword": {
                     "type": "secureString"
                 },
                 "patchMode": {
                     "type": "string"
                 },
                 "enableHotpatching": {
                     "type": "bool"
                 },
                 "sqlVirtualMachineLocation": {
                     "type": "string"
                 },
                 "sqlVirtualMachineName": {
                     "type": "string"
                 },
                 "sqlConnectivityType": {
                     "type": "string"
                 },
                 "sqlPortNumber": {
                     "type": "int"
                 },
                 "SQLAuthUpdateUserName": {
                     "type" : "string"
                 },
                 "SQLAuthUpdatePassword": {
                     "type" : "secureString"
                  },
                  "sqlStorageDisksCount": {
                     "type": "int"
                 },
                 "sqlStorageWorkloadType": {
                     "type": "string"
                 },
                 "sqlStorageDisksConfigurationType": {
                     "type": "string"
                 },
                 "sqlStorageStartingDeviceId": {
                     "type": "int"
                 },
                 "sqlStorageDeploymentToken": {
                     "type": "int"
                 },
                 "sqlAutopatchingDayOfWeek": {
                     "type": "string"
                 },
                 "sqlAutopatchingStartHour": {
                     "type": "string"
                 },
                 "sqlAutopatchingWindowDuration": {
                     "type": "string"
                 },
                 "dataPath": {
                     "type": "string"
                 },
                 "dataDisksLUNs": {
                     "type": "array"
                 },
                 "logPath": {
                     "type": "string"
                 },
                 "logDisksLUNs": {
                     "type": "array"
                 },
                 "tempDbPath": {
                     "type": "string"
                 },
                 "rServicesEnabled": {
                     "type": "string"
                 },
                 "sqlServerImageType":{
                     "type" : "string"
                 },
                 "sqlServerLicenseType":{
                     "type":"string"
                 },
                 "sqlServerSku":{
                      "type":"string"
                 },
                 "sqlServerImagePublisher": {
                     "type" : "string"
                 },
                 "maxdop": {
                     "type": "int"
                 },
                 "isOptimizeForAdHocWorkloadsEnabled": {
                     "type": "bool"
                 },
                 "collation": {
                     "type": "string"
                 },
                 "minServerMemoryMB": {
                     "type": "int"
                 },
                 "maxServerMemoryMB": {
                     "type": "int"
                 },
                 "tempDbPath": {
                     "type": "string"
                 },
                 "dataFileCount": {
                     "type": "int"
                 },
                 "dataFileSize": {
                     "type": "int"
                 },
                 "dataGrowth": {
                     "type": "int"
                 },
                 "logFileSize": {
                     "type": "int"
                 },
                 "logGrowth": {
                     "type": "int"
                 },
                 "SQLSystemDbOnDataDisk": {
                     "type": "bool"
                 },
                 "KeyVaultCredentialEnabled": {
                     "type" : "bool"
                 },
                 "sqlAkvCredentialName" : { 
                     "type" : "string"
                  },
                 "sqlAkvUrl" : { 
                     "type" : "string"
                  },
                 "sqlAkvPrincipalName" : { 
                     "type" : "string"
                  },
                 "sqlAkvPrincipalSecret": { 
                     "type" : "string"
                  }
               },
               "variables": {
                 "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                 "vnetId": "[parameters('virtualNetworkId')]",
                 "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]"
               },
               "resources": [
                 {
                     "name": "[parameters('networkInterfaceName')]",
                     "type": "Microsoft.Network/networkInterfaces",
                     "apiVersion": "2021-03-01",
                     "location": "[resourceGroup().location]",
                     "dependsOn": [
                         "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
                         "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]"
                     ],
                     "properties": {
                         "ipConfigurations": [
                             {
                                 "name": "ipconfig1",
                                 "properties": {
                                     "subnet": {
                                         "id": "[variables('subnetRef')]"
                                     },
                                     "privateIPAllocationMethod": "Dynamic",
                                     "publicIpAddress": 
                                       "[if(parameters('createPublicIpAddress'), createObject('id', resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName')) ),json('null') )]"

                                     // {
                                     //     "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]"
                                     // }
                                 }
                             }
                         ],
                         "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                         "networkSecurityGroup": {
                             "id": "[variables('nsgId')]"
                         }
                     }
                 },
                 {
                     "name": "[parameters('networkSecurityGroupName')]",
                     "type": "Microsoft.Network/networkSecurityGroups",
                     "apiVersion": "2019-02-01",
                     "location": "[resourceGroup().location]",
                     "properties": {
                         "securityRules": "[parameters('networkSecurityGroupRules')]"
                     }
                 },
                 {
                     "condition" : "[parameters('createPublicIpAddress')]",
                     "name": "[parameters('publicIpAddressName')]",
                     "type": "Microsoft.Network/publicIpAddresses",
                     "apiVersion": "2019-02-01",
                     "location": "[resourceGroup().location]",
                     "properties": {
                         "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
                     },
                     "sku": {
                         "name": "[parameters('publicIpAddressSku')]"
                     }
                 },
                 {
                     "name": "[parameters('dataDiskResources')[copyIndex()].name]",
                     "type": "Microsoft.Compute/disks",
                     "apiVersion": "2020-12-01",
                     "location": "[resourceGroup().location]",
                     "properties": "[parameters('dataDiskResources')[copyIndex()].properties]",
                     "sku": {
                         "name": "[parameters('dataDiskResources')[copyIndex()].sku]"
                     },
                     "copy": {
                         "name": "managedDiskResources",
                         "count": "[length(parameters('dataDiskResources'))]"
                     }
                 },
                 {
                     "name": "[parameters('virtualMachineName')]",
                     "type": "Microsoft.Compute/virtualMachines",
                     "apiVersion": "2021-07-01",
                     "location": "[resourceGroup().location]",
                     "dependsOn": [
                         "managedDiskResources",
                         "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"
                     ],
                     "properties": {
                         "hardwareProfile": {
                             "vmSize": "[parameters('virtualMachineSize')]"
                         },
                         "storageProfile": {
                             "osDisk": {
                                 "createOption": "fromImage",
                                 "managedDisk": {
                                     "storageAccountType": "[parameters('osDiskType')]"
                                 }
                             },
                             "imageReference": {
                                 "publisher": "[parameters('sqlServerImagePublisher')]",
                                 "offer": "[parameters('sqlServerImageType')]", 
                                 "sku": "[parameters('sqlServerSku')]",
                                 "version": "latest"
                             },
                             "copy": [
                                 {
                                     "name": "dataDisks",
                                     "count": "[length(parameters('dataDisks'))]",
                                     "input": {
                                         "lun": "[parameters('dataDisks')[copyIndex('dataDisks')].lun]",
                                         "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                         "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                         "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                         "managedDisk": {
                                             "id": "[coalesce(parameters('dataDisks')[copyIndex('dataDisks')].id, if(equals(parameters('dataDisks')[copyIndex('dataDisks')].name, json('null')), json('null'), resourceId('Microsoft.Compute/disks', parameters('dataDisks')[copyIndex('dataDisks')].name)))]",
                                             "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].storageAccountType]"
                                         },
                                         "writeAcceleratorEnabled": "[parameters('dataDisks')[copyIndex('dataDisks')].writeAcceleratorEnabled]"
                                     }
                                 }
                             ]
                         },
                         "networkProfile": {
                             "networkInterfaces": [
                                 {
                                     "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                 }
                             ]
                         },
                         "osProfile": {
                             "computerName": "[parameters('virtualMachineComputerName')]",
                             "adminUsername": "[parameters('adminUsername')]",
                             "adminPassword": "[parameters('adminPassword')]",
                             "windowsConfiguration": {
                                 "enableAutomaticUpdates": true,
                                 "provisionVmAgent": true,
                                 "patchSettings": {
                                     "enableHotpatching": "[parameters('enableHotpatching')]",
                                     "patchMode": "[parameters('patchMode')]"
                                 }
                             }
                         },
                         "diagnosticsProfile": {
                             "bootDiagnostics": {
                                 "enabled": true
                             }
                         }
                     }
                 },
                 {
                     "name": "[parameters('sqlVirtualMachineName')]",
                     "type": "Microsoft.SqlVirtualMachine/SqlVirtualMachines",
                     "apiVersion": "2017-03-01-preview",
                     "location": "[parameters('sqlVirtualMachineLocation')]",
                     "properties": {
                         "virtualMachineResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('sqlVirtualMachineName'))]",
                         "sqlManagement": "Full",
                         "SqlServerLicenseType": "[parameters('sqlServerLicenseType')]",
                         "AutoPatchingSettings": {
                             "Enable": true,
                             "DayOfWeek": "[parameters('sqlAutopatchingDayOfWeek')]",
                             "MaintenanceWindowStartingHour": "[parameters('sqlAutopatchingStartHour')]",
                             "MaintenanceWindowDuration": "[parameters('sqlAutopatchingWindowDuration')]"
                         },
                         "KeyVaultCredentialSettings": {
                             "Enable": "[parameters('KeyVaultCredentialEnabled')]",
                             "CredentialName": "[parameters('sqlAkvCredentialName')]",
                             "AzureKeyVaultUrl": "[parameters('sqlAkvUrl')]",
                             "ServicePrincipalName": "[parameters('sqlAkvPrincipalName')]",
                             "ServicePrincipalSecret": "[parameters('sqlAkvPrincipalSecret')]"
                         },
                         "StorageConfigurationSettings": {
                             "DiskConfigurationType": "[parameters('sqlStorageDisksConfigurationType')]",
                             "StorageWorkloadType": "[parameters('sqlStorageWorkloadType')]",
                             "SQLDataSettings": {
                                 "LUNs": "[parameters('dataDisksLUNs')]",
                                 "DefaultFilePath": "[parameters('dataPath')]"
                             },
                             "SQLLogSettings": {
                                 "LUNs": "[parameters('logDisksLUNs')]",
                                 "DefaultFilePath": "[parameters('logPath')]"
                             },
                             "SQLTempDbSettings": {
                                 "DefaultFilePath": "[parameters('tempDbPath')]",
                                 "DataFileCount": "[parameters('dataFileCount')]",
                                 "DataFileSize": "[parameters('dataFileSize')]",
                                 "DataGrowth": "[parameters('dataGrowth')]",
                                 "LogFileSize": "[parameters('logFileSize')]",
                                 "LogGrowth": "[parameters('logGrowth')]"
                             },
                             "SQLSystemDbOnDataDisk": "[parameters('SQLSystemDbOnDataDisk')]"
                         },
                         "ServerConfigurationsManagementSettings": {
                             "SQLConnectivityUpdateSettings": {
                                 "ConnectivityType": "[parameters('sqlConnectivityType')]",
                                 "Port": "[parameters('sqlPortNumber')]",
                                 "SQLAuthUpdateUserName": "[parameters('SQLAuthUpdateUserName')]", 
                                 "SQLAuthUpdatePassword": "[parameters('SQLAuthUpdatePassword')]"
                             },
                             "AdditionalFeaturesServerConfigurations": {
                                 "IsRServicesEnabled": "[parameters('rServicesEnabled')]"
                             },
                             "SQLInstanceSettings": {
                                 "maxDop": "[parameters('maxdop')]",
                                 "isOptimizeForAdHocWorkloadsEnabled": "[parameters('isOptimizeForAdHocWorkloadsEnabled')]",
                                 "collation": "[parameters('collation')]",
                                 "minServerMemoryMB": "[parameters('minServerMemoryMB')]",
                                 "maxServerMemoryMB": "[parameters('maxServerMemoryMB')]"
                              }
                         }
                     },
                     "dependsOn": [
                         "[resourceId('Microsoft.Compute/virtualMachines', parameters('sqlVirtualMachineName'))]"
                     ]
                 }
               ],
               "outputs": {
                 "adminUsername": {
                     "type": "string",
                     "value": "[parameters('adminUsername')]"
                 }
               }
            },
            "parameters":{

               "sqlServerSku":{
                  "value":"[parameters('sqlServerSku')]"
               },
               "sqlServerImagePublisher":{
                  "value":"[parameters('sqlServerImagePublisher')]"
               },
               "sqlServerImageType":{
                  "value":"[parameters('sqlServerImageType')]"
               },
               "sqlServerLicenseType":{
                  "value":"[parameters('sqlServerLicenseType')]"
               },
               "location":{
                  "value":"[resourceGroup().location]"
               },
               "networkInterfaceName":{
                  "value":"[concat(variables('vmArray')[copyIndex()],'-ni')]"
               },
               "enableAcceleratedNetworking":{
                  "value": "[parameters('enableAcceleratedNetworking')]"
               },
               "networkSecurityGroupName":{
                  "value":"[concat(variables('vmArray')[copyIndex()],'-nsg')]"
               },
               "networkSecurityGroupRules":{
                  "value":[
                     
                  ]
               },
               "subnetName":{
                  // "value":"[variables('subnetArray')[copyIndex()]]"
                  "value": "[parameters('subnetNameForAG')]"
               },
               "virtualNetworkId":{
                  "value":"[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', parameters('virtualNetwork') )]"
               },
               "createPublicIpAddress" : {
                  "value" : "[parameters('createPublicIpAddress')]"
               },
               "publicIpAddressName":{
                  "value":"[concat(variables('vmArray')[copyIndex()],'-ip')]"
               },
               "publicIpAddressType":{
                  "value":"[parameters('publicIpAddressType')]"
               },
               "publicIpAddressSku":{
                  "value":"[parameters('publicIpAddressSku')]"
               },
               "virtualMachineName":{
                  "value":"[variables('vmArray')[copyIndex()]]"
               },
               "virtualMachineComputerName":{
                  "value":"[variables('vmArray')[copyIndex()]]"
               },
               "virtualMachineRG":{
                  "value":"[resourceGroup().name]"
               },
               "osDiskType":{
                  "value":"Premium_LRS"
               },
               "dataDisks":{
                  "value":[
                     {
                        "lun":0,
                        "createOption":"attach",
                        "caching":"ReadOnly",
                        "writeAcceleratorEnabled":false,
                        "id":null,
                        "name":"[concat(variables('vmArray')[copyIndex()], '_DataDisk_0')]",
                        "storageAccountType":null,
                        "diskSizeGB":null,
                        "diskEncryptionSet":null
                     },
                     {
                        "lun":1,
                        "createOption":"attach",
                        "caching":"None",
                        "writeAcceleratorEnabled":false,
                        "id":null,
                        "name":"[concat(variables('vmArray')[copyIndex()], '_DataDisk_1')]",
                        "storageAccountType":null,
                        "diskSizeGB":null,
                        "diskEncryptionSet":null
                     }
                  ]
               },
               "dataDiskResources":{
                  "value":[
                     {
                        "name":"[concat(variables('vmArray')[copyIndex()], '_DataDisk_0')]",
                        "sku":"Premium_LRS",
                        "properties":{
                           "diskSizeGB":1024,
                           "creationData":{
                              "createOption":"empty"
                           }
                        }
                     },
                     {
                        "name":"[concat(variables('vmArray')[copyIndex()], '_DataDisk_1')]",
                        "sku":"Premium_LRS",
                        "properties":{
                           "diskSizeGB":1024,
                           "creationData":{
                              "createOption":"empty"
                           }
                        }
                     }
                  ]
               },
               "virtualMachineSize":{
                  "value":"[parameters('virtualMachineSize')]"
               },
               "adminUsername":{
                  "value":"[parameters('adminUsername')]"
               },
               "adminPassword":{
                  "value":"[parameters('adminPassword')]"
               },
               "patchMode":{
                  "value":"AutomaticByOS"
               },
               "enableHotpatching":{
                  "value":false
               },
               "sqlVirtualMachineLocation":{
                  "value":"[resourceGroup().location]"
               },
               "sqlVirtualMachineName":{
                  "value":"[variables('vmArray')[copyIndex()]]"
               },
               "sqlConnectivityType":{
                  "value": "[parameters('sqlConnectivityType')]"
               },
               "sqlPortNumber":{
                  "value": "[parameters('sqlPortNumber')]"
               },
               "SQLAuthUpdateUserName": {
                  "value" : "[parameters('SQLAuthUpdateUserName')]"
               },
               "SQLAuthUpdatePassword": {
                  "value" : "[parameters('SQLAuthUpdatePassword')]"
               },
               "sqlStorageDisksCount":{
                  "value":1
               },
               "sqlStorageWorkloadType":{
                  "value":"OLTP"
               },
               "sqlStorageDisksConfigurationType":{
                  "value":"NEW"
               },
               "sqlStorageStartingDeviceId":{
                  "value":2
               },
               "sqlStorageDeploymentToken":{
                  "value":35240
               },
               "sqlAutopatchingDayOfWeek":{
                  "value":"Sunday"
               },
               "sqlAutopatchingStartHour":{
                  "value":"2"
               },
               "sqlAutopatchingWindowDuration":{
                  "value":"60"
               },
               "dataPath":{
                  "value":"[parameters('dataPath')]"
               },
               "dataDisksLUNs":{
                  "value":[
                     0
                  ]
               },
               "logPath":{
                  "value":"[parameters('logPath')]"
               },
               "logDisksLUNs":{
                  "value":[
                     1
                  ]
               },
               "tempDbPath":{
                  "value":"[parameters('tempDbPath')]"
               },
               "rServicesEnabled":{
                  "value":"false"
               },
               "KeyVaultCredentialEnabled": {
                  "value" : "[parameters('KeyVaultCredentialEnabled')]"
               },
               "sqlAkvCredentialName" : { 
                  "value" : "[parameters('sqlAkvCredentialName')]"
               },
               "sqlAkvUrl" : { 
                  "value" : "[parameters('sqlAkvUrl')]"
               },
               "sqlAkvPrincipalName" : { 
                  "value" : "[parameters('sqlAkvPrincipalName')]"
               },
               "sqlAkvPrincipalSecret": { 
                  "value" : "[parameters('sqlAkvPrincipalSecret')]"
               },
               "maxdop": {
                  "value" : "[parameters('maxdop')]"
               },
               "isOptimizeForAdHocWorkloadsEnabled": {
                  "value" : "[parameters('isOptimizeForAdHocWorkloadsEnabled')]"
               },
               "collation": {
                  "value" : "[parameters('collation')]"
               },
               "minServerMemoryMB": {
                  "value" : "[parameters('minServerMemoryMB')]"
               },
               "maxServerMemoryMB": {
                  "value" : "[parameters('maxServerMemoryMB')]"
               },
              "dataFileCount": {
                  "value": "[parameters('dataFileCount')]"
              },
              "dataFileSize": {
                  "value": "[parameters('dataFileSize')]"
              },
              "dataGrowth": {
                  "value": "[parameters('dataGrowth')]"
              },
              "logFileSize": {
                  "value": "[parameters('logFileSize')]"
              },
              "logGrowth": {
                  "value": "[parameters('logGrowth')]"
              },
              "SQLSystemDbOnDataDisk": {
                  "value": "[parameters('SQLSystemDbOnDataDisk')]"
              }
            }
         }
      }
      ,
      {
         "type":"Microsoft.Resources/deployments",
         "apiVersion":"2021-04-01",
         "name":"Join-the-domain",
         "dependsOn":[
            "Create-SQLVM"
         ],
         "properties":{
            "expressionEvaluationOptions": {
               "scope": "inner"
            },
            "mode":"Incremental",
            "template":{
               "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "parameters": {
                "vmList": {
                  "type": "string",
                  "minLength": 1,
                  "metadata": {
                    "description": "List of virtual machines to be domain joined, if using multiple VMs, make their names comma separate. E.g. VM01, VM02, VM03."
                  }
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "Location name of the virtual machine"
                  },
                  "defaultValue": "[resourceGroup().location]"
                },
                "domainJoinUserName": {
                  "type": "string",
                  "metadata": {
                    "description": "Domain NetBiosName plus User name of a domain user with sufficient rights to perfom domain join operation. E.g. domain\\username"
                  }
                },
                "domainJoinUserPassword": {
                  "type": "secureString",
                  "metadata": {
                    "description": "Domain user password"
                  }
                },
                "domainFQDN": {
                  "type": "string",
                  "metadata": {
                    "description": "Domain FQDN where the virtual machine will be joined"
                  }
                },
                "ouPath": {
                  "type": "string",
                  "defaultValue": "",
                  "metadata": {
                    "description": "Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks. Example: \"OU=testOU; DC=domain; DC=Domain; DC=com\""
                  }
                }
               },
               "variables": {
                "domainJoinOptions": 3,
                "vmListArray": "[split(parameters('vmList'),',')]"
               },
               "resources": [
                {
                  "comments": "Join domain - JsonADDomainExtension",
                  "apiVersion": "2015-06-15",
                  "type": "Microsoft.Compute/virtualMachines/extensions",
                  "name": "[concat(trim(variables('vmListArray')[copyIndex()]),'/joindomain')]",
                  "location": "[resourceGroup().location]",
                  "copy": {
                    "name": "vmDomainJoinCopy",
                    "count": "[length(variables('vmListArray'))]"
                  },
                  "properties": {
                    "publisher": "Microsoft.Compute",
                    "type": "JsonADDomainExtension",
                    "typeHandlerVersion": "1.3",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "Name": "[parameters('domainFQDN')]",
                      "User": "[parameters('domainJoinUserName')]",
                      "Restart": "true",
                      "Options": "[variables('domainJoinOptions')]",
                      "OUPath": "[parameters('ouPath')]"
                    },
                    "protectedSettings": {
                      "Password": "[parameters('domainJoinUserPassword')]"
                    }
                  }
                }
               ]
            },
            "parameters":{
               "location":{
                  "value":"[resourceGroup().location]"
               },
               "vmList":{
                  "value":"[variables('vmList')]"
               },
               "domainJoinUserName":{
                  "value":"[concat(parameters('domainJoinUserName'),'\\',parameters('adminUsername'))]"
               },
               "domainJoinUserPassword":{
                  "value":"[parameters('adminPassword')]"
               },
               "domainFQDN":{
                  "value":"[parameters('domainFQDN')]"
               }
            }
         }
      },
      {
         "type":"Microsoft.Resources/deployments",
         "apiVersion":"2021-04-01",
         "name":"AG-Prerequisites",
         "dependsOn":[
            "[resourceId('Microsoft.Resources/deployments/', 'Join-the-domain')]"
         ],
         "properties":{
            "expressionEvaluationOptions": {
               "scope": "inner"
            },
            "mode":"Incremental",
            "template":{
               "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "parameters": {
                 "failoverClusterName": {
                     "type": "string",
                     "maxLength": 15,
                     "metadata": {
                         "description": "Specify the Windows Failover Cluster Name"
                     }
                 },
                 "existingVmList": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify comma separated list of names of SQL Server VM's to participate in the Availability Group (e.g. SQLVM1, SQLVM2). OS underneath should be at least WS 2016."
                     }
                 },
                 "sqlServerLicenseType": {
                     "allowedValues": [ "PAYG", "AHUB" ],
                     "type": "string",
                     "metadata": {
                         "description": "Specify the SQL Server License type for all VM's."
                     }
                 },
                 "existingVmResourceGroup": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify resourcegroup name for existing Vms."
                     },
                     "defaultValue": "[resourceGroup().name]"
                 },
                 "sqlServerImageType": {
                     "allowedValues": [ "SQL2017-WS2016", "SQL2016-WS2016", "SQL2019-WS2019" ],
                     "type": "string",
                     "metadata": {
                         "description": "Select the version of SQL Server Image type"
                     }
                 },
                 "existingFullyQualifiedDomainName": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the Fully Qualified Domain Name under which the Failover Cluster will be created. The VM's should already be joined to it. (e.g. contoso.com)"
                     }
                 },
                 "existingOuPath": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify an optional Organizational Unit (OU) on AD Domain where the CNO (Computer Object for Cluster Name) will be created (e.g. OU=testou,OU=testou2,DC=contoso,DC=com). Default is empty."
                     },
                     "defaultValue": ""
                 },
                 "existingDomainAccount": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the account for WS failover cluster creation in UPN format (e.g. example@contoso.com). This account can either be a Domain Admin or at least have permissions to create Computer Objects in default or specified OU."
                     }
                 },
                 "domainAccountPassword": {
                     "type": "SecureString",
                     "metadata": {
                         "description": "Specify the password for the domain account"
                     }
                 },
                 "existingSqlServiceAccount": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the domain account under which SQL Server service will run for AG setup in UPN format (e.g. sqlservice@contoso.com)"
                     }
                 },
                 "sqlServicePassword": {
                     "type": "SecureString",
                     "metadata": {
                         "description": "Specify the password for Sql Server service account"
                     }
                 },
                 "cloudWitnessName": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the name of the storage account to be used for creating Cloud Witness for Windows server failover cluster"
                     },
                     "defaultValue": "[concat('clwitness', uniqueString(resourceGroup().id))]"
                 },
                 "_artifactsLocation": {
                     "type": "string",
                     "metadata": {
                         "description": "Location of resources that the script is dependent on such as linked templates and DSC modules"
                     },
                     "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.sqlvirtualmachine/sql-vm-ag-setup/"
                 },
                 "_artifactsLocationSasToken": {
                     "type": "securestring",
                     "metadata": {
                         "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
                     },
                     "defaultValue": ""
                 },
                 "location": {
                     "type": "string",
                     "metadata": {
                         "description": "Location for all resources."
                     },
                     "defaultValue": "[resourceGroup().location]"
                 }
               },
               "variables": {
                 "existingVMListArray": "[split(parameters('existingVmList'),',')]",
                 "GroupResourceId": "[resourceId('Microsoft.SqlVirtualMachine/SqlVirtualMachineGroups', parameters('failoverClusterName'))]"
               },
               "resources": [
                 {
                     "type": "Microsoft.SqlVirtualMachine/SqlVirtualMachines",
                     "apiVersion": "2017-03-01-preview",
                     "name": "[trim(variables('existingVMListArray')[copyIndex()])]",
                     "location": "[resourceGroup().location]",
                     "copy": {
                         "name": "sqlvirtualMachineLoop",
                         "count": "[length(variables('existingVMListArray'))]"
                     },
                     "properties": {
                         "virtualMachineResourceId": "[resourceId(parameters('existingVmResourceGroup'), 'Microsoft.Compute/virtualMachines', trim(variables('existingVMListArray')[copyIndex()]))]",
                         "sqlServerLicenseType": "[parameters('sqlServerLicenseType')]"
                     }
                 },
                 {
                     "type": "Microsoft.Storage/storageAccounts",
                     "apiVersion": "2018-07-01",
                     "name": "[parameters('cloudWitnessName')]",
                     "sku": {
                         "name": "Standard_LRS"
                     },
                     "kind": "StorageV2",
                     "location": "[resourceGroup().location]",
                     "properties": {
                         "accessTier": "Hot",
                         "supportsHttpsTrafficOnly": true
                     }
                 },
                 {
                     "type": "Microsoft.SqlVirtualMachine/SqlVirtualMachineGroups",
                     "apiVersion": "2017-03-01-preview",
                     "name": "[parameters('failoverClusterName')]",
                     "location": "[resourceGroup().location]",
                     "properties": {
                         "SqlImageOffer": "[parameters('sqlServerImageType')]",
                         "SqlImageSku": "Enterprise",
                         "WsfcDomainProfile": {
                             "DomainFqdn": "[parameters('domainFQDN')]",
                             "OuPath": "[parameters('existingOuPath')]",
                             "ClusterBootstrapAccount": "[parameters('existingDomainAccount')]",
                             "ClusterOperatorAccount": "[parameters('existingDomainAccount')]",
                             "SqlServiceAccount": "[parameters('existingSqlServiceAccount')]",
                             "StorageAccountUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('cloudWitnessName')), '2018-07-01').primaryEndpoints['blob']]",
                             "StorageAccountPrimaryKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('cloudWitnessName')), '2018-07-01').keys[0].value]"
                         }
                     }
                 },
                 {
                     "type": "Microsoft.Resources/deployments",
                     "apiVersion": "2019-03-01",
                     "name": "joincluster",
                     "dependsOn": [
                         "[parameters('failoverClusterName')]",
                         "[parameters('cloudWitnessName')]",
                         "sqlvirtualMachineLoop"
                     ],
                     "properties": {
                        "expressionEvaluationOptions": {
                           "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                           "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                           "contentVersion": "1.0.0.0",
                           "parameters": {
                             "location": {
                                 "type": "string"
                             },
                             "existingVirtualMachineNames": {
                                 "type": "array"
                             },
                             "sqlServerLicenseType": {
                                 "type": "string"
                             },
                             "existingVmResourceGroup": {
                                 "type": "string"
                             },
                             "groupResourceId": {
                                 "type": "string"
                             },
                             "domainAccountPassword": {
                                 "type": "securestring"
                             },
                             "sqlServicePassword": {
                                 "type": "securestring"
                             }
                           },
                           "variables": {
                           },
                           "resources": [
                             {
                                 "name": "[trim(parameters('existingVirtualMachineNames')[copyIndex()])]",
                                 "type": "Microsoft.SqlVirtualMachine/SqlVirtualMachines",
                                 "apiVersion": "2017-03-01-preview",
                                 "location": "[resourceGroup().location]",
                                 "copy": {
                                     "name": "vmToClusterLoop",
                                     "count": "[length(parameters('existingVirtualMachineNames'))]"
                                 },
                                 "properties": {
                                     "virtualMachineResourceId": "[resourceId(parameters('existingVmResourceGroup'),'Microsoft.Compute/virtualMachines', trim(parameters('existingVirtualMachineNames')[copyIndex()]))]",
                                     "sqlServerLicenseType": "[parameters('sqlServerLicenseType')]",
                                     "SqlVirtualMachineGroupResourceId": "[parameters('groupResourceId')]",
                                     "WSFCDomainCredentials": {
                                         "ClusterBootstrapAccountPassword": "[parameters('domainAccountPassword')]",
                                         "ClusterOperatorAccountPassword": "[parameters('domainAccountPassword')]",
                                         "SqlServiceAccountPassword": "[parameters('sqlServicePassword')]"
                                     }
                                 }
                             }
                           ]
                         },
                         "parameters": {
                             "existingVirtualMachineNames": {
                                 "value": "[variables('existingVMListArray')]"
                             },
                             "location": {
                                 "value": "[resourceGroup().location]"
                             },
                             "sqlServerLicenseType": {
                                 "value": "[parameters('sqlServerLicenseType')]"
                             },
                             "existingVmResourceGroup": {
                                 "value": "[parameters('existingVmResourceGroup')]"
                             },
                             "groupResourceId": {
                                 "value": "[variables('groupResourceId')]"
                             },
                             "domainAccountPassword": {
                                 "value": "[parameters('domainAccountPassword')]"
                             },
                             "sqlServicePassword": {
                                 "value": "[parameters('sqlServicePassword')]"
                             }
                         }
                     }
                 }
               ]

            },
            "parameters":{
               "failoverClusterName":{
                  "value":"[parameters('failoverClusterName')]"
               },
               "existingVmList":{
                  "value":"[variables('vmList')]"
               },
               "sqlServerLicenseType":{
                  "value":"[parameters('sqlServerLicenseType')]"
               },
               "sqlServerImageType":{
                  "value":"[parameters('failoverSQLServerImageType')]"
               },
               "existingFullyQualifiedDomainName":{
                  "value":"[parameters('domainFQDN')]"
               },
               "existingDomainAccount":{
                  "value":"[concat(parameters('adminUsername'),'@',parameters('domainFQDN'))]"
               },
               "domainAccountPassword":{
                  "value":"[parameters('adminPassword')]"
               },
               "existingSqlServiceAccount":{
                  "value":"[concat(parameters('adminUsername'),'@',parameters('domainFQDN'))]"
               },
               "sqlServicePassword":{
                  "value":"[parameters('adminPassword')]"
               }
            }
         }
      },
      {
         "type":"Microsoft.Resources/deployments",
         "apiVersion":"2021-04-01",
         "name":"Load-Balancer",
         "dependsOn":[
            "[resourceId('Microsoft.Resources/deployments/', 'AG-Prerequisites')]"
         ],
         "properties":{
            "expressionEvaluationOptions": {
               "scope": "inner"
            },
            "mode":"Incremental",
            "template":{
               "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "parameters": {
                 "name": {
                     "type": "string"
                 },
                 "location": {
                     "type": "string"
                 },
                 "sku": {
                     "type": "string"
                 },
                 "tier": {
                     "type": "string"
                 }
               },
               "resources": [
                 {
                     "apiVersion": "2021-02-01",
                     "name": "[parameters('name')]",
                     "type": "Microsoft.Network/loadBalancers",
                     "location": "[resourceGroup().location]",
                     "dependsOn": [],
                     "tags": {},
                     "properties": {
                         "frontendIPConfigurations": [
                             {
                                 "name": "load1-frontend-ip",
                                 "properties": {
                                     "privateIPAddress": null,
                                     "privateIPAddressVersion": "IPv4",
                                     "privateIPAllocationMethod": "Dynamic",
                                     "subnet": {
                                         "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', parameters('virtualNetwork'), '/subnets/', parameters('subnetNameForAG') )]"

                                         // "/subscriptions/0009fc4d-e310-4e40-8e63-c48a23e9cdc1/resourceGroups/SQL-HA-RG/providers/Microsoft.Network/virtualNetworks/SQLHAVNET1/subnets/DC-Subnet"
                                     }
                                 }
                             }
                         ],
                         "backendAddressPools": [],
                         "probes": [],
                         "loadBalancingRules": [],
                         "inboundNatRules": [],
                         "outboundRules": []
                     },
                     "sku": {
                         "name": "[parameters('sku')]",
                         "tier": "[parameters('tier')]"
                     }
                 }
               ]
            },
            "parameters":{
               "name":{
                  "value":"[parameters('loadBalancerName')]"
               },
               "location":{
                  "value":"[resourceGroup().location]"
               },
               "sku":{
                  "value":"[parameters('loadBalancerSku')]"
               },
               "tier":{
                  "value":"[parameters('loadBalancerTier')]"
               }
            }
         }
      },
      {
         "type":"Microsoft.Resources/deployments",
         "apiVersion":"2021-04-01",
         "name":"AG-Listener",
         "dependsOn":[
            "[resourceId('Microsoft.Resources/deployments/', 'Load-Balancer')]"
         ],
         "properties":{
            "expressionEvaluationOptions": {
               "scope": "inner"
            },
            "mode":"Incremental",
            "template":{
               "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "parameters": {
                 "existingFailoverClusterName": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the name of the failover cluster"
                     }
                 },
                 "existingSqlAvailabilityGroup": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the name of SQL Availability Group for which listener is being created"
                     }
                 },
                 "existingVmList": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the Virtual machine list participating in SQL Availability Group e.g. VM1, VM2. Maximum number is 6."
                     }
                 },
                 "Listener": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify a name for the listener for SQL Availability Group"
                     },
                     "defaultValue": "aglistener"
                 },
                 "ListenerPort": {
                     "type": "Int",
                     "metadata": {
                         "description": "Specify the port for listener"
                     },
                     "defaultValue": 1433
                 },
                 "ListenerIp": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the available private IP address for the listener from the subnet the existing Vms are part of."
                     },
                     "defaultValue": "10.0.0.7"
                 },
                 "existingVnetResourcegroup": {
                     "defaultValue": "[resourcegroup().name]",
                     "type": "string",
                     "metadata": {
                         "description": "Specify the resourcegroup for virtual network"
                     }
                 },
                 "existingVnet": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the virtual network for Listener IP Address"
                     }
                 },
                 "existingSubnet": {
                     "type": "string",
                     "metadata": {
                         "description": "Specify the subnet under Vnet for Listener IP address"
                     }
                 },
                 "existingInternalLoadBalancer": {
                     "type": "string",
                     "metadata": {
                         "description": "Name of existing internal load balancer for the AG listener. Choose Standard Sku if the VMs are not in an availability set."
                     }
                 },
                 "ProbePort": {
                     "type": "Int",
                     "metadata": {
                         "description": "Specify the load balancer port number (e.g. 59999)"
                     },
                     "defaultValue": 59999
                 },
                 "Location": {
                     "type": "string",
                     "metadata": {
                         "description": "Location for all resources."
                     },
                     "defaultValue": "[resourceGroup().location]"
                 }
               },
               "variables": {
                 "LoadBalancerResourceId": "[resourceId('Microsoft.Network/loadBalancers', parameters('existingInternalLoadBalancer'))]",
                 "SubnetResourceId": "[concat(resourceid(parameters('existingVnetResourcegroup'),'Microsoft.Network/virtualNetworks', parameters('existingVnet')), '/subnets/', parameters('existingSubnet'))]",
                 "VmArray": "[split(parameters('existingVmList'),',')]",
                 "VM0": "[if(less(0, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[0]))), json('[]'))]",
                 "VM1": "[if(less(1, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[1]))), json('[]'))]",
                 "VM2": "[if(less(2, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[2]))), json('[]'))]",
                 "VM3": "[if(less(3, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[3]))), json('[]'))]",
                 "VM4": "[if(less(4, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[4]))), json('[]'))]",
                 "VM5": "[if(less(5, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[5]))), json('[]'))]",
                 "VM6": "[if(less(6, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[6]))), json('[]'))]",
                 "VM7": "[if(less(7, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[7]))), json('[]'))]",
                 "VM8": "[if(less(8, length(variables('VmArray'))), createArray(resourceId('Microsoft.SqlVirtualMachine/sqlVirtualMachines', trim(variables('VmArray')[8]))), json('[]'))]",
                 "SqlVmResourceIdList": "[union(variables('VM0'), variables('VM1'), variables('VM2'), variables('VM3'), variables('VM4'), variables('VM5'), variables('VM6'), variables('VM7'), variables('VM8'))]"
               },
               "resources": [
                 {
                     "type": "Microsoft.SqlVirtualMachine/SqlVirtualMachineGroups/availabilityGroupListeners",
                     "name": "[concat(parameters('existingFailoverClusterName'), '/', parameters('Listener'))]",
                     "apiVersion": "2017-03-01-preview",
                     "location": "[parameters('Location')]",
                     "properties": {
                         "AvailabilityGroupName": "[parameters('sqlAvailabilityGroup')]",
                         "AvailabilityGroupConfiguration": {
                           "copy": [
                                     {
                                       "name": "Replicas",
                                       "count": "[length(variables('VmArray'))]",
                                       "input": {
                                           "sqlVirtualMachineInstanceId": "[variables('SqlVmResourceIdList')[copyIndex('Replicas')]]",
                                           "role": "[if(equals(copyIndex('Replicas'),0), 'Primary', 'Secondary')]",
                                           "failover": "[if(less(copyIndex('Replicas'),3), 'Automatic', 'Manual')]",    
                                           "commit": "[if(less(copyIndex('Replicas'),3), 'Synchronous_Commit', 'Asynchronous_Commit')]",
                                           "readableSecondary": "All"
                                       }
                                     }
                                   ]
                         },
                         "LoadBalancerConfigurations": [
                             {
                                 "privateIPAddress": {
                                     "IpAddress": "[parameters('ListenerIp')]",
                                     "SubnetResourceId": "[variables('SubnetResourceId')]"
                                 },
                                 "LoadBalancerResourceId": "[variables('LoadBalancerResourceId')]",
                                 "ProbePort": "[parameters('ProbePort')]",
                                 "SqlVirtualMachineInstances": "[variables('SqlVmResourceIdList')]"
                             }
                         ],
                         "Port": "[parameters('ListenerPort')]"
                     }
                 }
               ]
            },
            "parameters":{
               "existingFailoverClusterName":{
                  "value":"[parameters('failoverClusterName')]"
               },
               "existingSqlAvailabilityGroup":{
                  "value":"[parameters('sqlAvailabilityGroup')]"
               },
               "existingVmList":{
                  "value":"[variables('vmList')]"
               },
               "existingVnet":{
                  "value":"[parameters('virtualNetwork')]"
               },
               "existingSubnet":{
                  "value":"[parameters('subnetNameForAG')]"
               },
               "existingInternalLoadBalancer":{
                  "value":"[parameters('loadBalancerName')]"
               },
               "ListenerIp":{
                  "value":"[parameters('ListenerIp')]"
               },
               "Listener":{
                  "value":"[parameters('ListenerName')]"
               }
            }
         }
      }
   ],
   "outputs":{
      
   }
}
